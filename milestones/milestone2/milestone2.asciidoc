= Milestone 2 - Creación, Distribución y Consumo de Reference Niche Wallets.
:author: Luis Molina <luis.molina@bitdubai.com> - Ezequiel Postan <ezequiel_postan@hotmail.com>
:version: v1.0
:date: 2015-06-30

== Introducción

En el milestone 1 desarrollamos nuestra primer Reference Niche Wallet. Este tipo de wallet como su nombre lo indica busca ser una referencia para que los desarrolladores de wallets puedan incorporar sus ideas de manera más simple que construyendo una wallet desde cero. +
La Reference Niche Wallet es completamente funcional, sin embargo su objetivo es ser minimalista para que su código y estructura pueda ser fácilmente reutilizada por los desarrolladores. +
Funcionalmente una reference wallet es idéntica a una nich wallet, pero conceptualmente se mantienen separadas en el sistema para poder distinguirlas fácilmente, en principio estas reference wallet son desarrolladas por bitDubai.

Lo que necesitamos incorporar en este milestone son los mecanismos para permitir que los desarrolladores creen e incorporen sus wallets al sistema. +

Ante este problema surge la necesidad de definir qué es una wallet con presisión.

== Wallet

Una wallet es una aplicación que puede enviar y/o recibir dinero. Si bien esta wallet usa sólo bitcoins tomamos el concepto de dinero también para fiat currencies entre otras cosas. +
Este tipo de aplicación involucra una gran cantidad de módulos. Podemos distingur en principio dos grandes grupos:

* Los módulos vinculados a lo que el usuario ve y usa para interactuar (front-end)
* Los módulos vinculados a llevar concretamente a cabo las acciones a realizar (back-end) 

Comencemos analizando los conceptos del front-end. +

Estrcutura de navegación:: Es una estructura que que representa lo que la interfaz de la wallet muestra, sean menues, tabs, fragmentos, botones, etc.
Recursos:: Son principalmente las imágenes que aparecen en la wallet-

En el back-end tenemos componentes que se encargan de diversas funciones, entro otros:

* Ejecutar las acciones de envío y recepción de bitcoins. 
* Llevar un balance de cuenta de la wallet.
* Administración de los contactos (registro, identificación, etc).

Para construír una nueva wallet desde cero uno podría escribir todos los módulos necesarios, la idea de la reference wallet es que los desarrolladores puedan reutilizar todo el back-end que usa la reference wallet y así agilizar su trabajo. +

== Requerimientos básicos

=== Administración de Developers

Requerimos mecanismos para:

* Identificar a un desarrollador (sea una persona física o empresa)
* Permitir que el desarrollador pueda editar la estructura de navegación y recursos
* Permitir que el desarrollador pueda publicar su wallet y realizar un seguimiento de la misma.

=== Administración de Wallets

Requerimos mecanismos para:

* Identificar wallets, su información descriptiva y recursos
* Crear una nueva Niche Wallet
* Editar una nueva Niche Wallet
* Correr y testear la Niche Wallet en el dispositivo
* Exponer la wallet para que pueda descargarse por otros usuarios

== Infraestructura para los rocedimientos

Antes de recorrer todo el proceso que adoptaremos para añadir como desarrolladores nuevas wallets, presentaremos brevemente los diversos componentes que agregaremos para cumplir con este milestone. Tras la presentación continuaremos con un desarrollo más detallado del los procedimientos. + 

Developer PIP sub APP:: Esta sub app le permite a los desarrolladores registrarse como tales en la red. Además le provee herramientas para testear sus wallets y otros plugins del sistema.
Wallet Runtime:: Este plugin se encarga de almacenar y administrar la estructura de navegación de las wallets.
Wallet Resources:: Este plugin administra los recursos de la wallet.
Wallet Factory SUB APP:: Cuando un developer cree una nueva wallet, esta sub app permitirá realizar la edición de la estructura de navegación y la edición de recursos de la wallet. Sin embargo no interactuará con el Wallet Runtime ni el Wallet Resources. Esta sub app creará proyectos que llamaremos wallet factory projects.
Wallet Publisher:: El Wallet Publisher permite crear un proyecto asociado a una Niche Wallet y entre otras cosas maneja el hecho de que puedan haber diferentes versiones. Una vez finalizada cada nueva versión de la Niche Wallet, exportamos el proyecto de Wallet Factory para que pueda ser abierto por el Wallet Publisher como una versión determinada de la Niche Wallet. + 
El Wallet Publisher permite también administrar que versiones se van subiendo a la wallet store y monitorear la cantidad de instalaciones de cada versión de la wallet en el sistema Fermat. Para subir una nueva version de la Reference Niche Wallet a la Wallet Store, se comunica con el Network Service DMP Wallet Store, que en el fondo es un nodo de la DAPP Wallet Store.
Wallet Store:: La Wallet Store es dentro del sistema fermat una DAPP (Distributed Application). Es decir que es una aplicación formada por un número indeterminado de nodos que colaboran entre si para manejar la funcionalidad de la DAPP a nivel del sistema completo. Su función es aceptar la publicación de la nueva (versión) de una  Niche Wallet y hace el relay en el DMP Network Service Wallet Store, para que se expanda por la región donde este tipo de wallet tiene sentido existir.
Wallet Manager:: La instalación la produce el Wallet Manager en el dispositivo de este usuario, el cual es responsible de unir todas las partes para que la nueva reference wallet esté disponible para ser usada.

== Primeros refinamientos

Analicemos los pasos para incorporar una wallet y extendamos las definiciones anteriores.

Lo primero que debemos realizar es registrarnos como desarrolladores en el sub app Developers. +
Aquí debemos ingresar entre otras cosas datos de contacto, los cuales deberán ser verificados antes de permitirle a un desarrollador utilizar las funcionalidades de la platagorma que exijen este tipo de identificación. +

Supongamos que queremos crear una wallet a partir de la Bitcoin Reference Wallet. Procedemos entonces a hacer un fork del repositorio de fermat de bitDubai y lo clonamos en nuestra computadora. +
Una vez clonado creamos un nuevo paquete en fermat/DMP/android/niche_wallet y otro en fermat/DMP/plugin/nuche_wallet_type con nombres adecuados como por ejemplo: /home/eze/Escritorio/fermat/DMP/android/niche_wallet/fermat-dmp-android-niche-wallet-bitcoin-wallet-myDeveloperName y /home/eze/Escritorio/fermat/DMP/plugin/niche_wallet_type/fermat-dmp-plugin-niche-wallet-type-crypto-wallet-myDeveloperName. +
En el folder de android se coloca el código dependiente de android, mientras que en el plugin se coloca la lógica de la wallet, la cual es un proyecto java. Cuando querramos exportar nuestra wallet a otra plataforma sólo deberemos reescribir el ,ódulo dependiente de la plataforma, pero la lógica que se escribió en java (lo que está en DMP/plugin) no requerirá reescribirse. +

NOTE: En DMP/plugin hay que crear la capa reference_niche_wallet_type y separar la reference bitcoin wallet allí o crear una para las niche_Wallet_type que no son reference.

En estos paquetes copiamos el código necesario de los proyectos de las reference wallets. +
A continuación debemos definir la estructura de navegación y recursos que tendrá la wallet que construiremos para poder conectarla y correrla en la plataforma. +

Procedemos entonces a abrir el Wallet Factory. +

=== Wallet Factory

Como mencionamos antes, el wallet factory permite editar la estructura de navegación de una wallet y sus recursos. Esta información se persiste en disco en un formato que llamaremos Wallet Factory Project. También deberá proveer la manera de permitir al desarrollador ejecutar concretamente lo que está editando. Para realizar estas labores requeriremos que entre otras cosas se pueda

* Importar la estructura de navegación y recursos de otra wallet.
* Crear un proyecto vacío
* Persistir en disco la estructura de navegación junto con las referencias as los recursos
* Correr un proyecto. Para lo cual deberá estar integrado correctamente en la plataforma
* La edición debe ser en modo gráfico, por lo que al agregar/eliminar/modificar un componente de la estructura de navegación debemos hacer que eso se refleje en una representación interna que luego podamos persistir.
* Un punto central a resolver es también que queremos que se establezca la relación entre los fragmentos que ejecutan las acciones concretas de la wallet y la estructura de navegación y se almacene dicha información dentro del wallet factory project.

IMPORTANT: Pregunta técnica ¿Cómo incorporar el código sin tener que recompilar lo existente? 

NOTE: Actualmente hay que hacer diversas modificaciones manuales para poder lograr integrar una nueva wallet y luego recompilar el proyecto. Hay que resolver cómo hacer estas configuraciones dinámicamente y automáticas a partir del wallet factory project.

Con este proyecto, los recursos y el código podemos integrar la wallet para correrla. +

Al terminar esta configuración estamos en condiciones de hacer correr la wallet desde el wallet factory para poder testear lo programado.

=== Wallet Publisher

Al culminar nuestra edición obtemdremos como producto de la Wallet Factory un wallet factory project. Hasta este momento la wallet que hemos creado sólo existe en nuestro dispositivo. Si deseamos ofrecer a otros usuarios la posibilidad de user nuestra wallet debemos publicarla para que puedan descargarla en el Wallet Store.

Para esta tarea requerimos de un componente que permita no sólo publicar la wallet en el wallet store, sino también administrar la publicación de diferentes versiones de una wallet (actualizaciones/upgrades). También querríamos que se puedan conocer algunos datos relacionados a las descargas de la wallet, por ejemplo el número de usuarios que la han instalado. +
Publicar en el Wallet Store significa que debemos registrar en el Wallet Store DMP Network Service que el dispositivo tiene esta wallet en su parte del catálogo. A su vez, requerimos colocar el wallet factory project en un lugar para que el wallet store pueda obtener la información necesaria para la instalación. +
Sin embargo, hay un detalle a considerar. Debemos mantener cierto nivel de seguridad para que nadie pueda subir


Entonces, al publicar una wallet el wallet publisher le pasa el wallet factory project al Wallet Resources, el cuál administra los recursos de las wallets
instaladas. Tras almacenar esta información pasa a informarle al Network Service DMP Wallet Store que registre que posee la wallet a publicar (adicionalmente debemos resolver si colocaremos metainformación de la wallet). +
En principio este network service registra que él posee nuestra wallet en su catálogo e informa a otros dispositivos (determinados bajo algún criterio a definir) la información de la wallet.

Para monitorear la cantidad de instalaciones utiliza el Network Service DMP Wallet Comunity, quien basicamente lleva el tracking de los Usuarios por Niche Wallet como una DAPP. 

=== Wallet Store

La Wallet Store es dentro del sistema fermat una DAPP (Distributed Application). Es decir que es una aplicación formada por un número indeterminado de nodos que colaboran entre si para manejar la funcionalidad de la DAPP a nivel del sistema completo. 
Su función es mostrarle al usuario wallets que pueden serle de interés y si el usuario decide instalar una wallet comunica la acción al Wallet Manager.
La Wallet Store debe manejar además de la identidad de la Wallet y del Developer que la publica. Además debe almacenar el Hash de la información correspondiente a la estructura de navegación y por otro lado el hash correspondiente a los recursos que esa wallet utiliza.
Luego el Wallet Manager en el dispositivo del usuario que finalmente instala la nueva wallet, se encargará de validar que la estructura de navegación obtenida de algún peer, tenga el mismo hash. Lo mismo con los recursos.

==== Catálogo Distribuído

En este caso, cada nodo de la Wallet Store  mantiene una parte del catálogo distribuído de wallets disponibles. Los nodos son sensibles a su localización y al rango de acción del  dispositivo donde vive. Usando esos dos inputs, solo guarda la parte del catálogo que es de interés para los usuarios de ese dispositivo. En otras palabras, las billeteras que tienen sentido en la región donde dicho dispositivo se mueve.

*Problemas a tratar*

Para pensar (escrito por Luis):

. Cual es el criterio, exactamente que se evalúa para saber si una billetera es o no de interés para un cierto nodo?
. Cuál es el criterio que un nodo usaría para difundir una billetera o para no hacerlo mas? Que criterio usaría? 
. Los nodos estarían conectados por proximidad? O por que criterio?

==== Target Version

La SUB APP Wallet Store tiene en cuenta para mostrar cada versión de una nueva wallet que la target version de dicha versión esté ya instalada en el dispositivo del usuario, simplemente no mostrando (por ahora) las wallets que apuntan a una versión superior. En algún momento deberíamos ver si podemos forzar una actualización para lograr que se pueda instalar una wallet muy nueva.

=== Wallet Manager

La instalación final la produce el Wallet Manager en el dispositivo del usuario que descarga la wallet. Este módulo es responsible de unir todas las partes para que la nueva wallet esté disponible para ser usada. +

Los fragmentos ya están instalados em el dispositivo, de manera que lo que falta son los recursos de la wallet. Para esto el Wallet Manager los obtiene a través del Network Service Wallet Resources. Entre los recursos de la wallet (imagenes, sonidos, layouts, etc) vienen también el archivo con la estructura de navegación. El Wallet Manager le inyecta la estructura al Wallet Runtime para que esté disponible a la hora que el usuario navegue a la nueva wallet dentro de la aplicación.
